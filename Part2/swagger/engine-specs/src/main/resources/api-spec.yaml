swagger: '2.0'
info:
  version: '0.1.0'
  title: Engine API
  description: An API to gamify applications
host: localhost:8080
basePath: /api
schemes:
  - http
parameters:
  apiParam:
    in: header
    name: apiKey
    description: The API key header
    required: true
    type: string
paths:
  /badges:
    parameters:
      - $ref: '#/parameters/apiParam'
    post:
      description: create a badge
      operationId: createBadge
      consumes:
        - application/json
      parameters:
        - name: badge
          in: body
          required: true
          schema:
            $ref: '#/definitions/BadgeWithoutId'
      responses:
        201:
          description: Badge successfully created
          schema:
            $ref: '#/definitions/Badge'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/Unauthorized'
        403:
          $ref: '#/responses/Forbidden'
        409:
          $ref: '#/responses/Conflict'

    get:
      description: get the list of all badges
      operationId: getAllBadges
      produces:
        - application/json
      responses:
        200:
          description: List of badges successfully retrieved
          schema:
            type: array
            items:
              $ref: '#/definitions/Badge'
        401:
          $ref: '#/responses/Unauthorized'
        403:
          $ref: '#/responses/Forbidden'
  /badges/{badgeId}:
    parameters:
      - $ref: '#/parameters/apiParam'
    get:
      description: Gets a badge by ID.
      operationId: getBadgeById
      produces:
        - application/json
      parameters:
        - in: path
          name: badgeId
          type: integer
          format: int64
          required: true
      responses:
        200:
          description: Badge successfully retrieved
          schema:
            $ref: '#/definitions/Badge'
        401:
          $ref: '#/responses/Unauthorized'
        403:
          $ref: '#/responses/Forbidden'
        404:
          $ref: '#/responses/NotFound'
  /pointScales:
    parameters:
      - $ref: '#/parameters/apiParam'
    post:
      description: create a pointScale
      operationId: createPointScale
      consumes:
        - application/json
      parameters:
        - name: pointScale
          in: body
          required: true
          schema:
            $ref: '#/definitions/PointScaleWithoutId'
      responses:
        201:
          description: PointScale successfully created
          schema:
            $ref: '#/definitions/PointScale'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/Unauthorized'
        403:
          $ref: '#/responses/Forbidden'
        409:
          $ref: '#/responses/Conflict'
    get:
      description: get the list of all pointScales
      operationId: getAllPointScales
      produces:
        - application/json
      responses:
        200:
          description: List of pointScales successfully retrieved
          schema:
            type: array
            items:
              $ref: '#/definitions/PointScale'
        401:
          $ref: '#/responses/Unauthorized'
        403:
          $ref: '#/responses/Forbidden'
  /pointScales/{pointScaleId}:
    parameters:
      - $ref: '#/parameters/apiParam'
    get:
      description: Gets a PointScale by ID.
      operationId: getPointScaleById
      produces:
        - application/json
      parameters:
        - in: path
          name: pointScaleId
          type: integer
          format: int64
          required: true
      responses:
        200:
          description: PointScale successfully retrieved
          schema:
            $ref: '#/definitions/PointScale'
        401:
          $ref: '#/responses/Unauthorized'
        403:
          $ref: '#/responses/Forbidden'
        404:
          $ref: '#/responses/NotFound'
  /events:
    parameters:
      - $ref: '#/parameters/apiParam'
    post:
      description: send an event
      operationId: sendEvent
      consumes:
        - application/json
      parameters:
        - name: event
          in: body
          required: true
          schema:
            $ref: '#/definitions/Event'
      responses:
        200:
          description: Event successfully sent
          schema:
            type: object
        401:
          $ref: '#/responses/Unauthorized'
        403:
          $ref: '#/responses/Forbidden'
  /rules:
    parameters:
      - $ref: '#/parameters/apiParam'
    post:
      description: create a rule
      operationId: createRule
      consumes:
        - application/json
      parameters:
        - name: rule
          in: body
          required: true
          schema:
            $ref: '#/definitions/RuleWithoutId'
      responses:
        201:
          description: Rule successfully created
          schema:
            $ref: '#/definitions/Rule'
        401:
          $ref: '#/responses/Unauthorized'
        403:
          $ref: '#/responses/Forbidden'
    get:
      description: get the list of all rules
      operationId: getAllRules
      produces:
        - application/json
      responses:
        200:
          description: List of rules successfully retrieved
          schema:
            type: array
            items:
              $ref: '#/definitions/Rule'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/Unauthorized'
        403:
          $ref: '#/responses/Forbidden'
  /rules/{ruleId}:
    parameters:
      - $ref: '#/parameters/apiParam'
    get:
      description: Gets a Rule by ID.
      operationId: getRuleById
      produces:
        - application/json
      parameters:
        - in: path
          name: ruleId
          type: integer
          format: int64
          required: true
      responses:
        200:
          description: Rule successfully retrieved
          schema:
            $ref: '#/definitions/Rule'
        401:
          $ref: '#/responses/Unauthorized'
        403:
          $ref: '#/responses/Forbidden'
        404:
          $ref: '#/responses/NotFound'
  /applications:
    post:
      description: create an application
      operationId: createApplication
      consumes:
        - application/json
      parameters:
        - name: application
          in: body
          required: true
          schema:
            $ref: '#/definitions/ApplicationWithoutId'
      responses:
        201:
          description: Application successfully created
          schema:
            $ref: '#/definitions/Application'
        400:
          $ref: '#/responses/BadRequest'
  /applications/{appId}:
    delete:
      description: Deletes an application by ID.
      operationId: deleteAppById
      parameters:
        - in: path
          name: appId
          type: integer
          format: int64
          required: true
      responses:
        204:
          description: Badge successfully deleted
responses:
  Unauthorized:
    description: Unauthorized, make sure you authentified using your apiKey
  Forbidden:
    description: Forbidden access, you cannot access this data
  BadRequest:
    description: Bad Request
  Conflict:
    description: Conflict, element already exists
  NotFound:
    description: Requested element not found

definitions:
  ApplicationWithoutId:
    type: object
    properties:
      owner:
        type: integer
        format: int64
  Application:
    type: object
    properties:
      id:
        type: integer
        format: int64
      owner:
        type: integer
        format: int64
      apiKey:
        type: string
  Rule:
    type: object
    properties:
      id:
        type: integer
        format: int64
      appId:
        type: integer
        format: int64
      if:
        type: object
        properties:
          type:
            type: string
      then:
        type: object
        properties:
          awardBadgeId:
            type: integer
            format: int64
          awardPoints:
            type: object
            properties:
              pointScaleId:
                type: integer
                format: int64
              amount:
                type: integer
  RuleWithoutId:
    type: object
    properties:
      if:
        type: object
        properties:
          type:
            type: string
      then:
        type: object
        properties:
          awardBadgeId:
            type: integer
            format: int64
          awardPoints:
            type: object
            properties:
              pointScaleId:
                type: integer
                format: int64
              amount:
                type: integer
  Badge:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      image:
        type: string
      appId:
        type: integer
        format: int64
  BadgeWithoutId:
    type: object
    properties:
      name:
        type: string
      image:
        type: string
  PointScale:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      description:
        type: string
      appId:
        type: integer
        format: int64
  PointScaleWithoutId:
    type: object
    properties:
      name:
        type: string
      description:
        type: string
  Event:
    type: object
    properties:
      userId:
        type: string
      type:
        type: string
      timestamp:
        type: string
        format: date-time